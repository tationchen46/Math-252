silhouette_score <- silhouette(cutree_hc, daisy(subset_data_matrix1,metric = 'gower'))
plot(silhouette_score,col="grey", main="Silhouette plot for higher education degree group")
# Cutting the dendrogram to form clusters
cutree_hc <- cutree(hc, k = 3) # for example, 3 clusters
# Silhouette analysis
silhouette_score <- silhouette(cutree_hc, daisy(subset_data_matrix1,metric = 'gower'))
plot(silhouette_score,col="grey", main="Silhouette plot for higher education degree group")
#check what's the attribution for each cluster.
library(ggplot2)
View(highschool)
View(subset_data_matrix1)
# For each continuous variable
ggplot(cbind(label_test,highschool), aes(x = as.factor(label_test), y = c(DAYS_BIRTH,DAYS_EMPLOYED,CNT_FAM_MEMBERS))) +
geom_boxplot() +
labs(title = "Distribution of ContinuousVariable across Clusters") +
theme_minimal()
cbind(label_test,highschool)
# For each continuous variable
ggplot(cbind(label_test,highschool), aes(x = as.factor(label_test), y = c(DAYS_BIRTH,DAYS_EMPLOYED,CNT_FAM_MEMBERS))) +
geom_boxplot() +
labs(title = "Distribution of ContinuousVariable across Clusters") +
theme_minimal()
# For each continuous variable
ggplot(aes(x = as.factor(label_test), y = c(DAYS_BIRTH,DAYS_EMPLOYED,CNT_FAM_MEMBERS))) +
geom_boxplot() +
labs(title = "Distribution of ContinuousVariable across Clusters") +
theme_minimal()
# Plot for DAYS_BIRTH
ggplot(cbind(highschool, label_test), aes(x = as.factor(label_test), y = DAYS_BIRTH)) +
geom_boxplot() +
labs(title = "Distribution of DAYS_BIRTH across Clusters") +
theme_minimal()
hc$labels
hc$call
cutree_hc
#check what's the attribution for each cluster.
subset_data_matrix1$Cluster <- cutree_hc
# Recalculate the distance matrix
library(gower)
library(cluster)
# Convert character columns to factors or numerics
for (col in colnames(subset_data_matrix1)) {
if (is.character(subset_data_matrix1[[col]])) {
# Assuming the column should be a factor
subset_data_matrix1[[col]] <- as.factor(subset_data_matrix1[[col]])
# Use as.numeric() instead if the column is numeric
}
}
continuous_vars <- names(highschool)[sapply(highschool, is.numeric)]  # Adjust this based on your data
average_continuous <- aggregate(highschool[continuous_vars], by = list(Cluster = highschool$Cluster), mean)
length(continuous_vars)
average_continuous <- aggregate(subset_data_matrix1[continuous_vars], by = list(Cluster = subset_data_matrix1$Cluster), mean)
continuous_vars
subset_data_matrix1$Cluster
average_continuous <- aggregate(subset_data_matrix1[continuous_vars], by = list(Cluster = subset_data_matrix1$Cluster), mean)
# This will identify all numeric columns in your dataframe
continuous_vars <- names(subset_data_matrix1)[sapply(subset_data_matrix1, is.numeric)]
# Print the identified continuous variables to verify
print(continuous_vars)
# Verify that these columns exist in your dataframe
all(continuous_vars %in% names(subset_data_matrix1))
# Ensure that 'Cluster' is a column in your dataframe
# Assuming that cluster labels are stored in a column named 'Cluster'
average_continuous <- aggregate(subset_data_matrix1[continuous_vars],
by = list(Cluster = subset_data_matrix1$Cluster),
mean)
average_continuous <- aggregate(subset_data_matrix1[continuous_vars],
by = list(Cluster = subset_data_matrix1$Cluster),
mean)
average_continuous
average_continuous
#here we will use most frequence to represent the categorical variable for each cluster
get_mode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
categorical_vars <- names(subset_data_matrix1)[sapply(subset_data_matrix1, function(x) is.factor(x) || is.character(x))]  # Adjust based on your data
mode_categorical <- do.call(data.frame,
lapply(subset_data_matrix1[categorical_vars], function(x) tapply(x, subset_data_matrix1$Cluster, get_mode)))
mode_categorical
average_continuous
mode_categorical
km$centers
any(is.na(retired))
# we want to know how many level does categorical variable status have.
# Get unique values of STATUS if it's not a factor
unique_values <- unique(retired$STATUS)
# Print the unique values
print(unique_values)
# Print the number of unique values
print(paste("Number of unique values in STATUS:", length(unique_values)))
#so total should have 8 cluster
#remove the "" value in the cells
#since the all the cells of occupation_type is "" then just remove the whole occupation_type column
#retired<-retired %>% select(-ID, -NAME_INCOME_TYPE,-STATUS,-OCCUPATION_TYPE)
library(dplyr)
# Check if all columns exist
if (all(c("ID", "NAME_INCOME_TYPE", "OCCUPATION_TYPE") %in% colnames(retired))) {
# If all columns exist, remove them using dplyr's select
retired <- dplyr::select(retired, -ID, -NAME_INCOME_TYPE, -OCCUPATION_TYPE)
} else {
# If not all columns exist, you can add your desired action here
print("One or more specified columns do not exist in the dataframe.")
}
data_matrix2 <- as.data.frame(retired)
#Step 3: Extract the significant variable
# Assuming data_matrix1 is your dataset
column_lengths <- sapply(data_matrix2, length)
# View the lengths
print(column_lengths)
# Check if all columns have the same length
all_equal <- all(column_lengths == column_lengths[1])
if (all_equal) {
print("All columns have the same length.")
} else {
print("Not all columns have the same length.")
}
# Assuming data_matrix1 is already loaded in your R environment
library(FactoMineR)
# Performing FAMD
famd_result <- FAMD(data_matrix2, graph = FALSE)
# Selecting top contributing variables for the first ten principal component
top_variables_dim2 <- sort(famd_result$var$contrib[, "Dim.1"], decreasing = TRUE)[1:10]
# for the first ten principal component name
top_var_df2 <- as.data.frame(top_variables_dim2)
top_var_df2$Variable <- rownames(top_var_df2)
subset_data_matrix2 <- data_matrix2[, top_var_df2$Variable]
label_test<-data_matrix2$STATUS
# Recalculate the distance matrix
library(gower)
# Convert character columns to factors or numerics
for (col in colnames(subset_data_matrix2)) {
if (is.character(subset_data_matrix2[[col]])) {
# Convert to factor or numeric as appropriate
subset_data_matrix2[[col]] <- as.factor(subset_data_matrix2[[col]])
}
}
dist_matrix = daisy(subset_data_matrix2,metric = 'gower')
# Hierarchical clustering
hc <- hclust(dist_matrix, method = "complete")  # You can try different methods like "average", "single", etc.
print(hc)
plot(hc, main = "Cluster Dendrogram for retired group")
# Cutting the dendrogram to form clusters
cutree_hc <- cutree(hc, k = 8) # for example, 8 clusters
#check what's the attribution for each cluster.
subset_data_matrix2$Cluster <- cutree_hc
#here we will use average to represent the numerical variable for each cluster
continuous_vars <- names(subset_data_matrix2)[sapply(subset_data_matrix2, is.numeric)]  # Adjust this based on your data
average_continuous <- aggregate(subset_data_matrix2[continuous_vars],
by = list(Cluster = subset_data_matrix2$Cluster),
mean)
#here we will use most frequence to represent the categorical variable for each cluster
get_mode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
categorical_vars <- names(subset_data_matrix2)[sapply(subset_data_matrix2, function(x) is.factor(x) || is.character(x))]  # Adjust based on your data
mode_categorical <- do.call(data.frame,
lapply(subset_data_matrix2[categorical_vars], function(x) tapply(x, subset_data_matrix2$Cluster, get_mode)))
average_continuous
mode_categorical
#kprototype
library(klaR)
library(clustMixType)
# Set the number of clusters, ensuring it does not exceed the number of rows
try_clusters <- min(nrow(subset_data_matrix2), 8)
# Perform k-proto clustering on the cleaned matrix
# Adjust 'k' as necessary for your analysis
km <- kproto(subset_data_matrix2, try_clusters)
km$centers
#Check is NA value in sub_data3
any(is.na(married))
#Return False means no missing value
# we want to know how many level does categorical variable status have.
# Get unique values of STATUS if it's not a factor
unique_values <- unique(married$STATUS)
# Print the unique values
print(unique_values)
# Print the number of unique values
print(paste("Number of unique values in STATUS:", length(unique_values)))
#so total should have 8 cluster
#remove the "" value in the cells
married <- married[married$OCCUPATION_TYPE != "", ]
#married<-married %>% select(-ID, -NAME_FAMILY_STATUS,-STATUS)
library(dplyr)
# Remove the "" value in the cells
married <- married[married$OCCUPATION_TYPE != "", ]
# Check if all columns exist
if (all(c("ID", "NAME_FAMILY_STATUS") %in% colnames(married))) {
# If all columns exist, remove them using dplyr's select
married <- dplyr::select(married, -ID, -NAME_FAMILY_STATUS,)
} else {
# If not all columns exist, take an alternative action
print("One or more specified columns do not exist in the dataframe.")
}
data_matrix3 <- as.data.frame(married)
#Step 3: Extract the significant variable
# Assuming data_matrix1 is your dataset
column_lengths <- sapply(data_matrix3, length)
# View the lengths
print(column_lengths)
# Check if all columns have the same length
all_equal <- all(column_lengths == column_lengths[1])
if (all_equal) {
print("All columns have the same length.")
} else {
print("Not all columns have the same length.")
}
# Assuming data_matrix1 is already loaded in your R environment
library(FactoMineR)
# Performing FAMD
famd_result <- FAMD(data_matrix3, graph = FALSE)
# Selecting top contributing variables for the first ten principal component
top_variables_dim2 <- sort(famd_result$var$contrib[, "Dim.1"], decreasing = TRUE)[1:10]
# for the first ten principal component name
top_var_df3 <- as.data.frame(top_variables_dim2)
top_var_df3$Variable <- rownames(top_var_df3)
subset_data_matrix3 <- data_matrix3[, top_var_df3$Variable]
label_test<-data_matrix3$STATUS
#View(subset_data_matrix3)
# Recalculate the distance matrix
library(gower)
# Convert character columns to factors or numerics
if (exists("subset_data_matrix3")) {
for (col in colnames(subset_data_matrix3)) {
if (is.character(subset_data_matrix3[[col]])) {
subset_data_matrix3[[col]] <- as.factor(subset_data_matrix3[[col]])
} else {
subset_data_matrix3[[col]] <- as.numeric(subset_data_matrix3[[col]])
}
}
} else {
print("subset_data_matrix3 is not a valid data frame.")
}
View(subset_data_matrix3)
library(cluster)
dist_matrix = daisy(subset_data_matrix3,metric = 'gower')
# Hierarchical clustering
hc <- hclust(dist_matrix, method = "complete")  # You can try different methods like "average", "single", etc.
print(hc)
plot(hc, main="Cluster Dendrogram for married group")
# Cutting the dendrogram to form clusters
cutree_hc <- cutree(hc, k = 8) # for example, 3 clusters
#check what's the attribution for each cluster.
subset_data_matrix3$Cluster <- cutree_hc
#here we will use average to represent the numerical variable for each cluster
continuous_vars <- names(subset_data_matrix3)[sapply(subset_data_matrix3, is.numeric)]  # Adjust this based on your data
average_continuous <- aggregate(subset_data_matrix3[continuous_vars],
by = list(Cluster = subset_data_matrix3$Cluster),
mean)
#here we will use most frequence to represent the categorical variable for each cluster
get_mode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
categorical_vars <- names(subset_data_matrix3)[sapply(subset_data_matrix3, function(x) is.factor(x) || is.character(x))]  # Adjust based on your data
mode_categorical <- do.call(data.frame,
lapply(subset_data_matrix3[categorical_vars], function(x) tapply(x, subset_data_matrix3$Cluster, get_mode)))
average_continuous
mode_categorical
#Check is NA value in sub_data4
any(is.na(property))
# we want to know how many level does categorical variable status have.
# Get unique values of STATUS if it's not a factor
unique_values <- unique(property$STATUS)
# Print the unique values
print(unique_values)
# Print the number of unique values
print(paste("Number of unique values in STATUS:", length(unique_values)))
#so total should have 8 cluster
#Return False means no missing value
#remove the "" value in the cells
property <- property[property$OCCUPATION_TYPE != "", ]
#married<-married %>% select(-ID, -NAME_FAMILY_STATUS,-STATUS)
library(dplyr)
# Check if all columns exist
if (all(c("ID", "NAME_HOUSING_TYPE") %in% colnames(property))) {
# If all columns exist, remove them using dplyr's select
property <- dplyr::select(property, -ID, -NAME_HOUSING_TYPE)
} else {
# If not all columns exist, take an alternative action
print("One or more specified columns do not exist in the dataframe.")
}
data_matrix4 <- as.data.frame(property)
#Step 3: Extract the significant variable
# Assuming data_matrix1 is your dataset
column_lengths <- sapply(data_matrix4, length)
# View the lengths
print(column_lengths)
# Check if all columns have the same length
all_equal <- all(column_lengths == column_lengths[1])
if (all_equal) {
print("All columns have the same length.")
} else {
print("Not all columns have the same length.")
}
# Assuming data_matrix1 is already loaded in your R environment
library(FactoMineR)
# Performing FAMD
famd_result <- FAMD(data_matrix4, graph = FALSE)
# Selecting top contributing variables for the first ten principal component
top_variables_dim2 <- sort(famd_result$var$contrib[, "Dim.1"], decreasing = TRUE)[1:10]
# for the first ten principal component name
top_var_df3 <- as.data.frame(top_variables_dim2)
top_var_df3$Variable <- rownames(top_var_df3)
subset_data_matrix4 <- data_matrix4[, top_var_df3$Variable]
label_test<-data_matrix4$STATUS
#View(subset_data_matrix4)
# Recalculate the distance matrix
library(gower)
# Convert character columns to factors or numerics
if (exists("subset_data_matrix4")) {
for (col in colnames(subset_data_matrix4)) {
if (is.character(subset_data_matrix4[[col]])) {
subset_data_matrix4[[col]] <- as.factor(subset_data_matrix4[[col]])
}
}
} else {
print("subset_data_matrix4 is not a valid data frame.")
}
dist_matrix = daisy(subset_data_matrix4,metric = 'gower')
# Hierarchical clustering
hc <- hclust(dist_matrix, method = "complete")  # You can try different methods like "average", "single", etc.
print(hc)
plot(hc, main = "Cluster Dendrogram for property group")
# Cutting the dendrogram to form clusters
cutree_hc <- cutree(hc, k = 8) # for example, 3 clusters
#check what's the attribution for each cluster.
subset_data_matrix4$Cluster <- cutree_hc
#here we will use average to represent the numerical variable for each cluster
continuous_vars <- names(subset_data_matrix4)[sapply(subset_data_matrix4, is.numeric)]  # Adjust this based on your data
average_continuous <- aggregate(subset_data_matrix4[continuous_vars],
by = list(Cluster = subset_data_matrix4$Cluster),
mean)
#here we will use most frequence to represent the categorical variable for each cluster
get_mode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
categorical_vars <- names(subset_data_matrix4)[sapply(subset_data_matrix4, function(x) is.factor(x) || is.character(x))]  # Adjust based on your data
mode_categorical <- do.call(data.frame,
lapply(subset_data_matrix4[categorical_vars], function(x) tapply(x, subset_data_matrix4$Cluster, get_mode)))
average_continuous
mode_categorical
#Check is NA value in sub_data4
any(is.na(manager))
# we want to know how many level does categorical variable status have.
# Get unique values of STATUS if it's not a factor
unique_values <- unique(manager$STATUS)
# Print the unique values
print(unique_values)
# Print the number of unique values
print(paste("Number of unique values in STATUS:", length(unique_values)))
#so total should have 3 cluster
#Return False means no missing value
#remove the "" value in the cells
manager <- manager[manager$OCCUPATION_TYPE != "", ]
#married<-married %>% select(-ID, -NAME_FAMILY_STATUS,-STATUS)
library(dplyr)
# Check if all columns exist
if (all(c("ID", "OCCUPATION_TYPE") %in% colnames(manager))) {
# If all columns exist, remove them using dplyr's select
manager <- dplyr::select(manager, -ID, -OCCUPATION_TYPE)
} else {
# If not all columns exist, take an alternative action
print("One or more specified columns do not exist in the dataframe.")
}
data_matrix5 <- as.data.frame(manager)
#Step 3: Extract the significant variable
# Assuming data_matrix1 is your dataset
column_lengths <- sapply(data_matrix5, length)
# View the lengths
print(column_lengths)
# Check if all columns have the same length
all_equal <- all(column_lengths == column_lengths[1])
if (all_equal) {
print("All columns have the same length.")
} else {
print("Not all columns have the same length.")
}
# Assuming data_matrix1 is already loaded in your R environment
library(FactoMineR)
# Performing FAMD
famd_result <- FAMD(data_matrix5, graph = FALSE)
# Selecting top contributing variables for the first ten principal component
top_variables_dim2 <- sort(famd_result$var$contrib[, "Dim.1"], decreasing = TRUE)[1:10]
# for the first ten principal component name
top_var_df3 <- as.data.frame(top_variables_dim2)
top_var_df3$Variable <- rownames(top_var_df3)
subset_data_matrix5 <- data_matrix5[, top_var_df3$Variable]
label_test<-data_matrix5$STATUS
#View(subset_data_matrix4)
# Recalculate the distance matrix
library(gower)
# Convert character columns to factors or numerics
if (exists("subset_data_matrix5")) {
for (col in colnames(subset_data_matrix5)) {
if (is.character(subset_data_matrix5[[col]])) {
subset_data_matrix5[[col]] <- as.factor(subset_data_matrix5[[col]])
}
}
} else {
print("subset_data_matrix5 is not a valid data frame.")
}
dist_matrix = daisy(subset_data_matrix5,metric = 'gower')
# Hierarchical clustering
hc <- hclust(dist_matrix, method = "complete")  # You can try different methods like "average", "single", etc.
print(hc)
plot(hc, main = "Cluster Dendrogram for manager group")
# Cutting the dendrogram to form clusters
cutree_hc <- cutree(hc, k = 3) # for example, 3 clusters
#check what's the attribution for each cluster.
subset_data_matrix5$Cluster <- cutree_hc
#here we will use average to represent the numerical variable for each cluster
continuous_vars <- names(subset_data_matrix5)[sapply(subset_data_matrix5, is.numeric)]  # Adjust this based on your data
average_continuous <- aggregate(subset_data_matrix5[continuous_vars],
by = list(Cluster = subset_data_matrix5$Cluster),
mean)
#here we will use most frequence to represent the categorical variable for each cluster
get_mode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
categorical_vars <- names(subset_data_matrix5)[sapply(subset_data_matrix5, function(x) is.factor(x) || is.character(x))]  # Adjust based on your data
mode_categorical <- do.call(data.frame,
lapply(subset_data_matrix5[categorical_vars], function(x) tapply(x, subset_data_matrix5$Cluster, get_mode)))
average_continuous
mode_categorical
#Check is NA value in sub_data4
any(is.na(female))
# we want to know how many level does categorical variable status have.
# Get unique values of STATUS if it's not a factor
unique_values <- unique(female$STATUS)
# Print the unique values
print(unique_values)
# Print the number of unique values
print(paste("Number of unique values in STATUS:", length(unique_values)))
#so total should have 4 cluster
#Return False means no missing value
#remove the "" value in the cells
female <- female[female$OCCUPATION_TYPE != "", ]
#married<-married %>% select(-ID, -NAME_FAMILY_STATUS,-STATUS)
library(dplyr)
# Check if all columns exist
if (all(c("ID", "CODE_GENDER") %in% colnames(female))) {
# If all columns exist, remove them using dplyr's select
female <- dplyr::select(female, -ID, -CODE_GENDER)
} else {
# If not all columns exist, take an alternative action
print("One or more specified columns do not exist in the dataframe.")
}
data_matrix7 <- as.data.frame(female)
#Step 3: Extract the significant variable
# Assuming data_matrix6 is your dataset
column_lengths <- sapply(data_matrix7, length)
# View the lengths
print(column_lengths)
# Check if all columns have the same length
all_equal <- all(column_lengths == column_lengths[1])
if (all_equal) {
print("All columns have the same length.")
} else {
print("Not all columns have the same length.")
}
# Assuming data_matrix1 is already loaded in your R environment
library(FactoMineR)
# Performing FAMD
famd_result <- FAMD(data_matrix7, graph = FALSE)
# Selecting top contributing variables for the first ten principal component
top_variables_dim2 <- sort(famd_result$var$contrib[, "Dim.1"], decreasing = TRUE)[1:10]
# for the first ten principal component name
top_var_df3 <- as.data.frame(top_variables_dim2)
top_var_df3$Variable <- rownames(top_var_df3)
subset_data_matrix7 <- data_matrix7[, top_var_df3$Variable]
label_test<-data_matrix7$STATUS
#View(subset_data_matrix4)
# Recalculate the distance matrix
library(gower)
# Convert character columns to factors or numerics
if (exists("subset_data_matrix7")) {
for (col in colnames(subset_data_matrix7)) {
if (is.character(subset_data_matrix7[[col]])) {
subset_data_matrix7[[col]] <- as.factor(subset_data_matrix7[[col]])
}
}
} else {
print("subset_data_matrix7 is not a valid data frame.")
}
dist_matrix = daisy(subset_data_matrix7,metric = 'gower')
# Hierarchical clustering
hc <- hclust(dist_matrix, method = "complete")  # You can try different methods like "average", "single", etc.
print(hc)
plot(hc, main = "Cluster Dendrogram for female group")
# Cutting the dendrogram to form clusters
cutree_hc <- cutree(hc, k = 4) # for example, 4 clusters
#check what's the attribution for each cluster.
subset_data_matrix7$Cluster <- cutree_hc
#here we will use average to represent the numerical variable for each cluster
continuous_vars <- names(subset_data_matrix7)[sapply(subset_data_matrix7, is.numeric)]  # Adjust this based on your data
average_continuous <- aggregate(subset_data_matrix7[continuous_vars],
by = list(Cluster = subset_data_matrix7$Cluster),
mean)
#here we will use most frequence to represent the categorical variable for each cluster
get_mode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
categorical_vars <- names(subset_data_matrix7)[sapply(subset_data_matrix7, function(x) is.factor(x) || is.character(x))]  # Adjust based on your data
mode_categorical <- do.call(data.frame,
lapply(subset_data_matrix7[categorical_vars], function(x) tapply(x, subset_data_matrix7$Cluster, get_mode)))
average_continuous
mode_categorical
